<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Entry Management - Entry/Exit Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: "#1e40af",
              secondary: "#3b82f6",
              accent: "#06b6d4",
              dark: "#1f2937",
              light: "#f8fafc",
            },
          },
        },
      };
    </script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
  </head>
  <body
    class="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 min-h-screen"
  >
    <div class="flex h-screen">
      <%- include('partials/sidebar') %>

      <main class="flex-1 overflow-y-auto lg:ml-0">
        <%- include('partials/header', { title: 'Entry Management' }) %>

        <!-- Main Content -->
        <div class="p-4 lg:p-6 animate-fade-in">
          <!-- Page Header with Enhanced Design -->
          <div class="mb-8 lg:mb-10">
            <div class="relative">
              <!-- Background decoration -->
              <div
                class="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-indigo-500/10 rounded-3xl transform -rotate-1"
              ></div>
              <div class="relative glass-card rounded-2xl p-6 lg:p-8">
                <div
                  class="flex flex-col lg:flex-row lg:items-center lg:justify-between"
                >
                  <div class="flex items-center gap-4 mb-4 lg:mb-0">
                    <div class="relative">
                      <div
                        class="p-3 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl text-white shadow-lg"
                      >
                        <i class="fas fa-id-card text-xl"></i>
                      </div>
                      <div class="pulse-ring"></div>
                    </div>
                    <div>
                      <h1
                        class="text-3xl lg:text-4xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent"
                      >
                        Entry Management
                      </h1>
                      <p class="text-gray-600 mt-1 text-lg">
                        Manage entries, visitors, and access logs
                      </p>
                    </div>
                  </div>
                  <!-- Live Status Indicator -->
                  <div
                    class="flex items-center gap-3 bg-blue-50 px-4 py-2 rounded-full border border-blue-200"
                  >
                    <div
                      class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"
                    ></div>
                    <span class="text-blue-700 text-sm font-medium"
                      >Live Data</span
                    >
                    <span class="text-blue-600 text-xs" id="lastUpdate"
                      >Updated now</span
                    >
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Current Occupancy Card -->
          <div
            class="stat-card p-6 mb-8"
            style="
              background: linear-gradient(135deg, #10b981 0%, #34d399 100%);
            "
          >
            <div class="flex items-center justify-between">
              <div>
                <h3
                  class="text-lg lg:text-xl font-bold text-white mb-2 opacity-90"
                >
                  Current Occupancy
                </h3>
                <div class="flex items-center">
                  <span
                    class="text-3xl lg:text-5xl font-bold text-white mr-3"
                    id="currentCount"
                    ><%= currentCount %></span
                  >
                  <span class="text-white opacity-80">people inside</span>
                </div>
              </div>
              <div class="hidden md:block">
                <i class="fas fa-users text-6xl text-white opacity-20"></i>
              </div>
            </div>
            <div class="flex space-x-3 mt-6">
              <button
                class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white font-medium py-2 px-4 rounded-xl transition-all duration-200 flex items-center text-sm lg:text-base backdrop-blur-sm"
                onclick="viewCurrentOccupancy()"
              >
                <i class="fas fa-eye mr-2"></i>
                <span class="hidden sm:inline">View Details</span>
                <span class="sm:hidden">Details</span>
              </button>
              <button
                class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white font-medium py-2 px-4 rounded-xl transition-all duration-200 flex items-center text-sm lg:text-base backdrop-blur-sm"
                onclick="refreshOccupancy()"
              >
                <i class="fas fa-sync-alt mr-2"></i>
                <span class="hidden sm:inline">Refresh</span>
              </button>
            </div>
          </div>

          <!-- Quick Actions Grid -->
          <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8">
            <!-- New Entry -->
            <button
              class="group glass-card hover:shadow-xl border-2 border-transparent hover:border-blue-200 p-4 lg:p-6 transition-all duration-300 text-center"
              onclick="openEntryModal()"
              style="
                background: linear-gradient(135deg, #e0e7ff 0%, #c7d2fe 100%);
              "
            >
              <div
                class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg group-hover:scale-110 transition-transform"
              >
                <i class="fas fa-sign-in-alt text-white text-xl"></i>
              </div>
              <h3 class="text-sm lg:text-lg font-bold text-gray-900 mb-2">
                New Entry
              </h3>
              <p class="text-xs lg:text-sm text-gray-600 hidden sm:block">
                Process new person entry
              </p>
              <div
                class="mt-2 text-blue-600 text-xs lg:text-sm font-medium group-hover:text-blue-700"
              >
                <span>Enter</span>
                <i
                  class="fas fa-arrow-right ml-1 group-hover:translate-x-1 transition-transform"
                ></i>
              </div>
            </button>

            <!-- Process Exit -->
            <button
              class="group glass-card hover:shadow-xl border-2 border-transparent hover:border-green-200 p-4 lg:p-6 transition-all duration-300 text-center"
              onclick="openExitModal()"
              style="
                background: linear-gradient(135deg, #d1fae5 0%, #bbf7d0 100%);
              "
            >
              <div
                class="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg group-hover:scale-110 transition-transform"
              >
                <i class="fas fa-sign-out-alt text-white text-xl"></i>
              </div>
              <h3 class="text-sm lg:text-lg font-bold text-gray-900 mb-2">
                Process Exit
              </h3>
              <p class="text-xs lg:text-sm text-gray-600 hidden sm:block">
                Handle person exit
              </p>
              <div
                class="mt-2 text-green-600 text-xs lg:text-sm font-medium group-hover:text-green-700"
              >
                <span>Exit</span>
                <i
                  class="fas fa-arrow-right ml-1 group-hover:translate-x-1 transition-transform"
                ></i>
              </div>
            </button>

            <!-- Register Person -->
            <button
              class="group glass-card hover:shadow-xl border-2 border-transparent hover:border-purple-200 p-4 lg:p-6 transition-all duration-300 text-center"
              onclick="openRegisterModal()"
              style="
                background: linear-gradient(135deg, #ede9fe 0%, #f3e8ff 100%);
              "
            >
              <div
                class="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg group-hover:scale-110 transition-transform"
              >
                <i class="fas fa-user-plus text-white text-xl"></i>
              </div>
              <h3 class="text-sm lg:text-lg font-bold text-gray-900 mb-2">
                Register Person
              </h3>
              <p class="text-xs lg:text-sm text-gray-600">
                Add new person to system
              </p>
              <div
                class="mt-2 text-purple-600 text-xs lg:text-sm font-medium group-hover:text-purple-700"
              >
                <span>Register</span>
                <i
                  class="fas fa-arrow-right ml-1 group-hover:translate-x-1 transition-transform"
                ></i>
              </div>
            </button>

            <!-- Search Person -->
            <button
              class="group glass-card hover:shadow-xl border-2 border-transparent hover:border-orange-200 p-4 lg:p-6 transition-all duration-300 text-center"
              onclick="openSearchModal()"
              style="
                background: linear-gradient(135deg, #ffedd5 0%, #fed7aa 100%);
              "
            >
              <div
                class="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg group-hover:scale-110 transition-transform"
              >
                <i class="fas fa-search text-white text-xl"></i>
              </div>
              <h3 class="text-sm lg:text-lg font-bold text-gray-900 mb-2">
                Search Person
              </h3>
              <p class="text-xs lg:text-sm text-gray-600">
                Find person in system
              </p>
              <div
                class="mt-2 text-orange-600 text-xs lg:text-sm font-medium group-hover:text-orange-700"
              >
                <span>Search</span>
                <i
                  class="fas fa-arrow-right ml-1 group-hover:translate-x-1 transition-transform"
                ></i>
              </div>
            </button>
          </div>

          <!-- Search Results -->
          <div
            id="searchResults"
            class="glass-card p-6 mb-6"
            style="display: none"
          >
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-lg font-bold text-gray-900 flex items-center">
                Search Results
              </h4>
              <button
                onclick="hideSearchResults()"
                class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-100 rounded-lg"
              >
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div id="searchResultsContent"></div>
          </div>

          <!-- Current Occupancy Details -->
        </div>
      </main>
    </div>

    <!-- Entry Modal -->
    <%- include('modals/entry-modal') %>

    <!-- Exit Modal -->
    <%- include('modals/exit-modal') %>

    <!-- Register Modal -->
    <%- include('modals/register-modal') %>

    <!-- Occupancy Details Modal -->
    <div
      id="occupancyModal"
      class="fixed inset-0 bg-black bg-opacity-60 hidden flex items-center justify-center z-50 backdrop-blur-sm modal-overlay"
    >
      <div
        class="bg-white rounded-3xl shadow-2xl max-w-4xl w-full mx-4 max-h-[95vh] overflow-hidden modal-container modal-lg"
      >
        <!-- Modal Header -->
        <div
          class="bg-gradient-to-r from-green-50 to-emerald-50 px-8 py-6 border-b border-green-100"
        >
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div
                class="w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center shadow-lg"
              >
                <i class="fas fa-users text-white text-lg"></i>
              </div>
              <div>
                <h2 class="text-2xl font-bold text-gray-900">
                  Current Occupancy
                </h2>
                <p class="text-sm text-gray-600">
                  People currently inside the facility
                </p>
              </div>
            </div>
            <button
              onclick="closeOccupancyModal()"
              class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-white hover:bg-opacity-50 rounded-xl"
            >
              <i class="fas fa-times text-xl"></i>
            </button>
          </div>
        </div>

        <!-- Modal Body -->
        <div class="modal-body p-8 overflow-y-auto max-h-[70vh]">
          <div id="occupancyModalContent">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>

        <!-- Modal Footer -->
        <div class="modal-footer bg-gray-50 px-8 py-6 border-t border-gray-200">
          <div class="flex justify-between items-center">
            <button
              type="button"
              onclick="refreshOccupancyModal()"
              class="btn btn-secondary px-6 py-3 rounded-xl"
            >
              <i class="fas fa-sync-alt mr-2"></i>Refresh
            </button>
            <button
              type="button"
              onclick="closeOccupancyModal()"
              class="btn btn-primary px-6 py-3 rounded-xl"
            >
              <i class="fas fa-times mr-2"></i>Close
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Search Modal -->
    <%- include('modals/search-modal') %>

    <script src="/js/entry-management.js"></script>

    <!-- Enhanced Entry Modal JavaScript -->
    <script>
      // Entry Modal Enhanced Functionality
      class EntryModalManager {
        constructor() {
          this.selectedPerson = null;
          this.selectedHost = null;
          this.facilities = [];
          this.totalAmount = 0;
          this.init();
        }

        init() {
          this.bindEvents();
          this.updateSubmitButton();
        }

        bindEvents() {
          // Person search functionality
          const entryPersonSearch =
            document.getElementById("entryPersonSearch");
          if (entryPersonSearch) {
            entryPersonSearch.addEventListener(
              "input",
              this.debounce((e) => {
                this.searchPerson(e.target.value, "entry");
              }, 300)
            );
          }

          // Host search functionality
          const hostPersonSearch = document.getElementById("hostPersonSearch");
          if (hostPersonSearch) {
            hostPersonSearch.addEventListener(
              "input",
              this.debounce((e) => {
                this.searchPerson(e.target.value, "host");
              }, 300)
            );
          }

          // Guest checkbox functionality
          const isGuestCheckbox = document.getElementById("isGuest");
          if (isGuestCheckbox) {
            isGuestCheckbox.addEventListener("change", (e) => {
              this.toggleHostSection(e.target.checked);
            });
          }

          // Facility checkboxes
          document
            .querySelectorAll(".facility-checkbox")
            .forEach((checkbox) => {
              checkbox.addEventListener("change", (e) => {
                this.toggleFacilityQuantity(e.target);
                this.updateTotalAmount();
              });
            });

          // Facility quantities
          document.querySelectorAll(".facility-quantity").forEach((input) => {
            input.addEventListener("input", () => {
              this.updateTotalAmount();
            });
          });

          // Form validation
          document.getElementById("entryForm").addEventListener("input", () => {
            this.updateSubmitButton();
          });

          // Form submission
          document
            .getElementById("entryForm")
            .addEventListener("submit", (e) => {
              this.handleFormSubmission(e);
            });
        }

        debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }

        async searchPerson(query, type) {
          if (query.length < 2) {
            this.clearSearchResults(type);
            return;
          }

          this.showSearchSpinner(type, true);
          this.clearSearchError(type);

          try {
            const response = await fetch("/api/search-person", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });

            if (!response.ok) {
              throw new Error("Search failed");
            }

            const data = await response.json();
            this.displaySearchResults(data.people || [], type);
          } catch (error) {
            this.showSearchError(type, "Search failed. Please try again.");
            console.error("Search error:", error);
          } finally {
            this.showSearchSpinner(type, false);
          }
        }

        displaySearchResults(people, type) {
          const resultsContainer = document.getElementById(
            `${type}PersonResults`
          );
          if (!resultsContainer) return;

          if (people.length === 0) {
            resultsContainer.innerHTML = `
            <div class="text-center py-4 text-gray-500">
              <i class="fas fa-search text-2xl mb-2"></i>
              <p>No people found</p>
            </div>
          `;
            return;
          }

          resultsContainer.innerHTML = people
            .map(
              (person) => `
          <div class="person-result p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors" 
               onclick="entryModalManager.selectPerson(${JSON.stringify(
                 person
               ).replace(/"/g, "&quot;")}, '${type}')">
            <div class="flex items-center justify-between">
              <div>
                <div class="font-semibold text-gray-900">${person.name}</div>
                <div class="text-sm text-gray-600 font-mono">${
                  person.cnic
                }</div>
                <div class="text-xs text-purple-600">${
                  person.category || "N/A"
                }</div>
              </div>
              <div class="text-right">
                <div class="text-sm text-green-600 font-medium">Balance: Rs. ${
                  person.balance || "0.00"
                }</div>
                <div class="text-xs text-gray-500">${
                  person.phone || "No phone"
                }</div>
              </div>
            </div>
          </div>
        `
            )
            .join("");
        }

        selectPerson(person, type) {
          if (type === "entry") {
            this.selectedPerson = person;
            this.showSelectedPerson(person);
            document.getElementById("entryPersonId").value = person.id;
            document.getElementById("entryPersonSearch").value = "";
            this.clearSearchResults("entry");
          } else if (type === "host") {
            this.selectedHost = person;
            this.showSelectedHost(person);
            document.getElementById("hostPersonId").value = person.id;
            document.getElementById("hostPersonSearch").value = "";
            this.clearSearchResults("host");
          }

          this.updateSubmitButton();
          this.updateTotalAmount();
        }

        showSelectedPerson(person) {
          const detailsContainer =
            document.getElementById("entryPersonDetails");
          const nameElement = document.getElementById("entryPersonName");
          const cnicElement = document.getElementById("entryPersonCnic");
          const categoryElement = document.getElementById(
            "entryPersonCategory"
          );
          const balanceElement = document.getElementById("entryPersonBalance");

          if (nameElement) nameElement.textContent = person.name;
          if (cnicElement) cnicElement.textContent = person.cnic;
          if (categoryElement)
            categoryElement.textContent = person.category || "N/A";
          if (balanceElement)
            balanceElement.textContent = `Balance: Rs. ${
              person.balance || "0.00"
            }`;

          if (detailsContainer) {
            detailsContainer.classList.remove("hidden");
          }
        }

        showSelectedHost(person) {
          const detailsContainer = document.getElementById(
            "selectedHostDetails"
          );
          const nameElement = document.getElementById("hostPersonName");
          const cnicElement = document.getElementById("hostPersonCnic");

          if (nameElement) nameElement.textContent = person.name;
          if (cnicElement) cnicElement.textContent = person.cnic;

          if (detailsContainer) {
            detailsContainer.classList.remove("hidden");
          }
        }

        clearSelectedPerson(type) {
          if (type === "entry") {
            this.selectedPerson = null;
            document.getElementById("entryPersonId").value = "";
            document
              .getElementById("entryPersonDetails")
              .classList.add("hidden");
          }
          this.updateSubmitButton();
        }

        clearSelectedHost() {
          this.selectedHost = null;
          document.getElementById("hostPersonId").value = "";
          document
            .getElementById("selectedHostDetails")
            .classList.add("hidden");
          this.updateSubmitButton();
        }

        toggleHostSection(isGuest) {
          const hostSection = document.getElementById("hostPersonSection");
          if (hostSection) {
            if (isGuest) {
              hostSection.classList.remove("hidden");
            } else {
              hostSection.classList.add("hidden");
              this.clearSelectedHost();
            }
          }
          this.updateSubmitButton();
        }

        toggleFacilityQuantity(checkbox) {
          const quantityInput = checkbox
            .closest(".facility-item")
            .querySelector(".facility-quantity");
          if (quantityInput) {
            quantityInput.disabled = !checkbox.checked;
            if (!checkbox.checked) {
              quantityInput.value = 1;
            }
          }
        }

        updateTotalAmount() {
          const facilityCheckboxes = document.querySelectorAll(
            ".facility-checkbox:checked"
          );
          let total = 0;
          const breakdown = [];

          facilityCheckboxes.forEach((checkbox) => {
            const price = parseFloat(checkbox.dataset.price) || 0;
            const name = checkbox.dataset.name;
            const quantityInput = checkbox
              .closest(".facility-item")
              .querySelector(".facility-quantity");
            const quantity = parseInt(quantityInput.value) || 1;
            const subtotal = price * quantity;

            total += subtotal;
            breakdown.push({ name, quantity, price, subtotal });
          });

          this.totalAmount = total;

          // Update display
          const totalElement = document.getElementById("totalAmount");
          if (totalElement) {
            totalElement.textContent = total.toFixed(2);
          }

          // Update breakdown
          const breakdownElement = document.getElementById("facilityBreakdown");
          if (breakdownElement) {
            if (breakdown.length === 0) {
              breakdownElement.innerHTML =
                '<div class="text-gray-500 text-sm">No facilities selected</div>';
            } else {
              breakdownElement.innerHTML = breakdown
                .map(
                  (item) => `
              <div class="flex justify-between text-sm">
                <span>${item.name} × ${item.quantity}</span>
                <span>Rs. ${item.subtotal.toFixed(2)}</span>
              </div>
            `
                )
                .join("");
            }
          }

          this.updatePaymentNote();
        }

        updatePaymentNote() {
          const isGuest = document.getElementById("isGuest")?.checked;
          const category = this.selectedPerson?.category;
          const noteElement = document.getElementById("paymentNote");

          if (!noteElement) return;

          let note = "";
          if (category === "Military Serving") {
            note = "💰 Payment waived for military personnel";
          } else if (isGuest && this.selectedHost) {
            note = `💳 Amount will be charged to host: ${this.selectedHost.name}`;
          } else if (isGuest && !this.selectedHost) {
            note = "⚠️ Please select a host person";
          } else {
            note = "💵 Amount to be paid by person";
          }

          noteElement.textContent = note;
        }

        updateSubmitButton() {
          const submitBtn = document.getElementById("processEntryBtn");
          const isGuest = document.getElementById("isGuest")?.checked;

          let isValid = this.selectedPerson !== null;

          if (isGuest) {
            isValid = isValid && this.selectedHost !== null;
          }

          if (submitBtn) {
            submitBtn.disabled = !isValid;
            submitBtn.classList.toggle("opacity-50", !isValid);
          }
        }

        async handleFormSubmission(e) {
          e.preventDefault();

          if (!this.validateForm()) {
            return;
          }

          this.setLoading(true);

          try {
            const formData = this.collectFormData();

            const response = await fetch("/api/process-entry", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(formData),
            });

            if (!response.ok) {
              throw new Error("Failed to process entry");
            }

            const result = await response.json();

            Toast.success("Entry processed successfully!");

            this.resetForm();
            closeEntryModal();

            // Refresh occupancy display
            if (typeof refreshOccupancy === "function") {
              refreshOccupancy();
            }
          } catch (error) {
            console.error("Entry submission error:", error);
            Toast.error("Failed to process entry. Please try again.");
          } finally {
            this.setLoading(false);
          }
        }

        validateForm() {
          if (!this.selectedPerson) {
            this.showSearchError("entry", "Please select a person");
            return false;
          }

          const isGuest = document.getElementById("isGuest")?.checked;
          if (isGuest && !this.selectedHost) {
            this.showSearchError("host", "Please select a host person");
            return false;
          }

          return true;
        }

        collectFormData() {
          const form = document.getElementById("entryForm");
          const formData = new FormData(form);

          const data = {
            person_id: this.selectedPerson.id,
            vehicle_number: formData.get("vehicle_number") || null,
            guest_count: parseInt(formData.get("guest_count")) || 1,
            has_stroller: formData.get("has_stroller") === "1",
            is_guest: formData.get("is_guest") === "1",
            host_person_id: this.selectedHost?.id || null,
            entry_remarks: formData.get("entry_remarks") || null,
            facilities: [],
            total_amount: this.totalAmount,
          };

          // Collect selected facilities
          document
            .querySelectorAll(".facility-checkbox:checked")
            .forEach((checkbox) => {
              const quantityInput = checkbox
                .closest(".facility-item")
                .querySelector(".facility-quantity");
              data.facilities.push({
                facility_id: parseInt(checkbox.value),
                quantity: parseInt(quantityInput.value) || 1,
              });
            });

          return data;
        }

        setLoading(loading) {
          const submitBtn = document.getElementById("processEntryBtn");
          const btnText = document.getElementById("entryBtnText");
          const btnLoading = document.getElementById("entryBtnLoading");
          const cancelBtn = document.getElementById("entryModalCancelBtn");

          if (submitBtn) submitBtn.disabled = loading;
          if (cancelBtn) cancelBtn.disabled = loading;

          if (btnText) btnText.classList.toggle("hidden", loading);
          if (btnLoading) btnLoading.classList.toggle("hidden", !loading);
        }

        resetForm() {
          this.selectedPerson = null;
          this.selectedHost = null;
          document.getElementById("entryForm").reset();
          document.getElementById("entryPersonDetails").classList.add("hidden");
          document
            .getElementById("selectedHostDetails")
            .classList.add("hidden");
          document.getElementById("hostPersonSection").classList.add("hidden");
          this.clearSearchResults("entry");
          this.clearSearchResults("host");

          // Reset facility quantities
          document.querySelectorAll(".facility-quantity").forEach((input) => {
            input.disabled = true;
            input.value = 1;
          });

          this.updateTotalAmount();
          this.updateSubmitButton();
        }

        // Utility methods
        showSearchSpinner(type, show) {
          const spinner = document.getElementById(`${type}PersonSearchSpinner`);
          if (spinner) {
            spinner.classList.toggle("hidden", !show);
          }
        }

        clearSearchResults(type) {
          const resultsContainer = document.getElementById(
            `${type}PersonResults`
          );
          if (resultsContainer) {
            resultsContainer.innerHTML = "";
          }
        }

        showSearchError(type, message) {
          const errorElement = document.getElementById(`${type}PersonError`);
          if (errorElement) {
            errorElement.textContent = message;
            errorElement.classList.remove("hidden");
          }
        }

        clearSearchError(type) {
          const errorElement = document.getElementById(`${type}PersonError`);
          if (errorElement) {
            errorElement.classList.add("hidden");
          }
        }
      }

      // Global functions for template compatibility
      window.clearSelectedPerson = function (type) {
        if (window.entryModalManager) {
          window.entryModalManager.clearSelectedPerson(type);
        }
      };

      window.clearSelectedHost = function () {
        if (window.entryModalManager) {
          window.entryModalManager.clearSelectedHost();
        }
      };

      // Initialize when DOM is ready
      document.addEventListener("DOMContentLoaded", function () {
        window.entryModalManager = new EntryModalManager();
      });

      // Reset form when modal opens
      const originalOpenEntryModal = window.openEntryModal;
      window.openEntryModal = function () {
        if (originalOpenEntryModal) {
          originalOpenEntryModal();
        }
        setTimeout(() => {
          if (window.entryModalManager) {
            window.entryModalManager.resetForm();
          }
        }, 100);
      };
    </script>

    <!-- Enhanced Exit Modal JavaScript -->
    <script>
      // Exit Modal Enhanced Functionality
      class ExitModalManager {
        constructor() {
          this.selectedExitPerson = null;
          this.init();
        }

        init() {
          this.bindEvents();
          this.updateSubmitButton();
        }

        bindEvents() {
          // Person search functionality
          const exitPersonSearch = document.getElementById("exitPersonSearch");
          if (exitPersonSearch) {
            exitPersonSearch.addEventListener(
              "input",
              this.debounce((e) => {
                this.searchPersonInside(e.target.value);
              }, 300)
            );
          }

          // Form submission
          document
            .getElementById("exitForm")
            .addEventListener("submit", (e) => {
              this.handleFormSubmission(e);
            });
        }

        debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }

        async searchPersonInside(query) {
          if (query.length < 2) {
            this.clearSearchResults();
            return;
          }

          this.showSearchSpinner(true);
          this.clearSearchError();

          try {
            const response = await fetch("/api/search-person-inside", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });

            if (!response.ok) {
              throw new Error("Search failed");
            }

            const data = await response.json();
            this.displaySearchResults(data.people || []);
          } catch (error) {
            this.showSearchError("Search failed. Please try again.");
            console.error("Search error:", error);
          } finally {
            this.showSearchSpinner(false);
          }
        }

        displaySearchResults(people) {
          const resultsContainer = document.getElementById("exitPersonResults");
          if (!resultsContainer) return;

          if (people.length === 0) {
            resultsContainer.innerHTML = `
              <div class="text-center py-4 text-gray-500 bg-gray-50 rounded-xl border-2 border-dashed border-gray-200">
                <i class="fas fa-search text-2xl mb-2"></i>
                <p class="font-medium">No people found inside the facility</p>
                <p class="text-sm">Try a different search term</p>
              </div>
            `;
            return;
          }

          resultsContainer.innerHTML = people
            .map(
              (person) => `
              <div class="person-result bg-white border-2 border-gray-200 rounded-xl hover:border-green-400 hover:bg-green-50 cursor-pointer transition-all duration-200 p-3" 
                   onclick="exitModalManager.selectExitPerson(${JSON.stringify(
                     person
                   ).replace(/"/g, "&quot;")})">
                
                <div class="flex items-center justify-between">
                  <!-- Person Info -->
                  <div class="flex items-center space-x-3 flex-1 min-w-0">
                    <div class="w-10 h-10 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center flex-shrink-0">
                      <i class="fas fa-user text-white text-sm"></i>
                    </div>
                    <div class="min-w-0 flex-1">
                      <h4 class="font-semibold text-gray-900 text-sm truncate">${
                        person.name
                      }</h4>
                      <div class="flex items-center space-x-2 mt-1">
                        <span class="text-xs text-gray-500 font-mono">${
                          person.cnic
                        }</span>
                        <span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full font-medium">
                          ${person.category || "N/A"}
                        </span>
                      </div>
                      <div class="text-xs text-gray-600 mt-1">
                        <i class="fas fa-clock mr-1"></i>
                        Inside for ${this.calculateDuration(person.entry_time)}
                      </div>
                    </div>
                  </div>
                  
                  <!-- Select Button -->
                  <div class="flex-shrink-0 ml-3">
                    <div class="w-8 h-8 bg-red-500 rounded-lg flex items-center justify-center">
                      <i class="fas fa-sign-out-alt text-white text-xs"></i>
                    </div>
                  </div>
                </div>
              </div>
            `
            )
            .join("");
        }

        renderEntryExtras(person) {
          const extras = [];
          if (person.is_guest)
            extras.push(`Guest (${person.guest_count || 1})`);
          if (person.has_stroller) extras.push("Has Stroller");
          if (person.vehicle_number)
            extras.push(`Vehicle: ${person.vehicle_number}`);
          if (person.host_name) extras.push(`Host: ${person.host_name}`);

          if (extras.length === 0) return "";

          return `
            <div class="mt-3 pt-3 border-t border-gray-200">
              <div class="flex flex-wrap gap-2">
                ${extras
                  .map(
                    (extra) => `
                  <span class="inline-flex items-center px-3 py-1 bg-orange-100 text-orange-800 text-xs rounded-full font-medium">
                    <i class="fas fa-info-circle mr-1"></i>
                    ${extra}
                  </span>
                `
                  )
                  .join("")}
              </div>
            </div>
          `;
        }

        calculateDuration(entryTime) {
          const duration = Math.floor(
            (new Date() - new Date(entryTime)) / (1000 * 60)
          );
          const hours = Math.floor(duration / 60);
          const minutes = duration % 60;
          return `${hours}h ${minutes}m`;
        }

        selectExitPerson(person) {
          this.selectedExitPerson = person;
          this.showSelectedPerson(person);
          document.getElementById("exitPersonId").value = person.id;
          document.getElementById("exitPersonSearch").value = "";
          this.clearSearchResults();
          this.updateSubmitButton();
        }

        showSelectedPerson(person) {
          const detailsContainer = document.getElementById("exitPersonDetails");
          const nameElement = document.getElementById("exitPersonName");
          const cnicElement = document.getElementById("exitPersonCnic");
          const categoryElement = document.getElementById("exitPersonCategory");
          const entryTimeElement = document.getElementById("exitEntryTime");
          const durationElement = document.getElementById("exitDuration");
          const amountElement = document.getElementById("exitAmountPaid");

          if (nameElement) nameElement.textContent = person.name;
          if (cnicElement) cnicElement.textContent = person.cnic;
          if (categoryElement)
            categoryElement.textContent = person.category || "N/A";
          if (entryTimeElement)
            entryTimeElement.textContent = new Date(
              person.entry_time
            ).toLocaleString();
          if (durationElement)
            durationElement.textContent = this.calculateDuration(
              person.entry_time
            );
          if (amountElement)
            amountElement.textContent = `Rs. ${person.amount_paid || "0.00"}`;

          // Show entry extras if available
          const extrasContainer = document.getElementById("exitEntryExtras");
          const extrasListContainer = document.getElementById(
            "exitEntryExtrasList"
          );

          const extras = [];
          if (person.is_guest)
            extras.push(`Guest (${person.guest_count || 1})`);
          if (person.has_stroller) extras.push("Stroller");
          if (person.vehicle_number)
            extras.push(`Vehicle: ${person.vehicle_number}`);
          if (person.host_name) extras.push(`Host: ${person.host_name}`);
          if (person.entry_remarks)
            extras.push(`Remarks: ${person.entry_remarks}`);

          if (extras.length > 0 && extrasContainer && extrasListContainer) {
            extrasListContainer.innerHTML = extras
              .map(
                (extra) => `
                <span class="inline-flex items-center px-2 py-1 bg-orange-100 text-orange-700 text-xs rounded font-medium">
                  ${extra}
                </span>
              `
              )
              .join("");
            extrasContainer.classList.remove("hidden");
          } else if (extrasContainer) {
            extrasContainer.classList.add("hidden");
          }

          if (detailsContainer) {
            detailsContainer.classList.remove("hidden");
          }

          // Show exit options
          const exitOptions = document.getElementById("exitOptions");
          if (exitOptions) {
            exitOptions.classList.remove("hidden");
          }
        }

        clearSelectedPerson() {
          this.selectedExitPerson = null;
          document.getElementById("exitPersonId").value = "";
          document.getElementById("exitPersonDetails").classList.add("hidden");
          document.getElementById("exitOptions").classList.add("hidden");
          this.updateSubmitButton();
        }

        setExitReason(reason, buttonElement) {
          const remarksTextarea = document.getElementById("exitRemarks");
          if (remarksTextarea) {
            remarksTextarea.value = reason;
          }

          // Update button states
          document.querySelectorAll(".exit-reason-btn").forEach((btn) => {
            btn.classList.remove(
              "border-green-500",
              "bg-green-50",
              "border-red-500",
              "bg-red-50",
              "border-yellow-500",
              "bg-yellow-50",
              "border-blue-500",
              "bg-blue-50"
            );
            btn.classList.add("border-gray-200");
          });

          // Highlight selected button
          if (buttonElement) {
            buttonElement.classList.remove("border-gray-200");
            if (reason.includes("Emergency")) {
              buttonElement.classList.add("border-red-500", "bg-red-50");
            } else if (reason.includes("Early")) {
              buttonElement.classList.add("border-yellow-500", "bg-yellow-50");
            } else if (reason.includes("End")) {
              buttonElement.classList.add("border-blue-500", "bg-blue-50");
            } else {
              buttonElement.classList.add("border-green-500", "bg-green-50");
            }
          }
        }

        updateSubmitButton() {
          const submitBtn = document.getElementById("processExitBtn");
          const isValid = this.selectedExitPerson !== null;

          if (submitBtn) {
            submitBtn.disabled = !isValid;
            submitBtn.classList.toggle("opacity-50", !isValid);
          }
        }

        async handleFormSubmission(e) {
          e.preventDefault();

          if (!this.validateForm()) {
            return;
          }

          this.setLoading(true);

          try {
            const formData = this.collectFormData();

            const response = await fetch("/api/process-exit", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(formData),
            });

            if (!response.ok) {
              throw new Error("Failed to process exit");
            }

            const result = await response.json();

            Toast.success("Exit processed successfully!");
            this.resetForm();
            closeExitModal();

            // Refresh occupancy display
            if (typeof refreshOccupancy === "function") {
              refreshOccupancy();
            }
          } catch (error) {
            console.error("Exit submission error:", error);
            Toast.error("Failed to process exit. Please try again.");
          } finally {
            this.setLoading(false);
          }
        }

        validateForm() {
          if (!this.selectedExitPerson) {
            this.showSearchError("Please select a person to exit");
            return false;
          }
          return true;
        }

        collectFormData() {
          const form = document.getElementById("exitForm");
          const formData = new FormData(form);

          return {
            person_id: this.selectedExitPerson.id,
            exit_remarks: formData.get("exit_remarks") || null,
          };
        }

        setLoading(loading) {
          const submitBtn = document.getElementById("processExitBtn");
          const btnText = document.getElementById("exitBtnText");
          const btnLoading = document.getElementById("exitBtnLoading");
          const cancelBtn = document.getElementById("exitModalCancelBtn");

          if (submitBtn) submitBtn.disabled = loading;
          if (cancelBtn) cancelBtn.disabled = loading;

          if (btnText) btnText.classList.toggle("hidden", loading);
          if (btnLoading) btnLoading.classList.toggle("hidden", !loading);
        }

        resetForm() {
          this.selectedExitPerson = null;
          document.getElementById("exitForm").reset();
          document.getElementById("exitPersonDetails").classList.add("hidden");
          document.getElementById("exitOptions").classList.add("hidden");
          this.clearSearchResults();

          // Reset exit reason buttons
          document.querySelectorAll(".exit-reason-btn").forEach((btn) => {
            btn.classList.remove(
              "border-green-500",
              "bg-green-50",
              "border-red-500",
              "bg-red-50",
              "border-yellow-500",
              "bg-yellow-50",
              "border-blue-500",
              "bg-blue-50"
            );
            btn.classList.add("border-gray-200");
          });

          this.updateSubmitButton();
        }

        // Utility methods
        showSearchSpinner(show) {
          const spinner = document.getElementById("exitPersonSearchSpinner");
          if (spinner) {
            spinner.classList.toggle("hidden", !show);
          }
        }

        clearSearchResults() {
          const resultsContainer = document.getElementById("exitPersonResults");
          if (resultsContainer) {
            resultsContainer.innerHTML = "";
          }
        }

        showSearchError(message) {
          const errorElement = document.getElementById("exitPersonError");
          if (errorElement) {
            errorElement.querySelector("span").textContent = message;
            errorElement.classList.remove("hidden");
          }
        }

        clearSearchError() {
          const errorElement = document.getElementById("exitPersonError");
          if (errorElement) {
            errorElement.classList.add("hidden");
          }
        }
      }

      // Global functions for template compatibility
      window.clearSelectedExitPerson = function () {
        if (window.exitModalManager) {
          window.exitModalManager.clearSelectedPerson();
        }
      };

      window.setExitReason = function (reason, buttonElement) {
        if (window.exitModalManager) {
          window.exitModalManager.setExitReason(reason, buttonElement);
        }
      };

      // Initialize when DOM is ready
      document.addEventListener("DOMContentLoaded", function () {
        window.exitModalManager = new ExitModalManager();
      });

      // Reset form when modal opens
      const originalOpenExitModal = window.openExitModal;
      window.openExitModal = function () {
        if (originalOpenExitModal) {
          originalOpenExitModal();
        }
        setTimeout(() => {
          if (window.exitModalManager) {
            window.exitModalManager.resetForm();
          }
        }, 100);
      };

      // Register Modal Functions
      window.openRegisterModal = function () {
        const modal = document.getElementById("registerModal");
        if (modal) {
          modal.classList.remove("hidden");
          modal.classList.add("flex");
          document.body.style.overflow = "hidden";

          // Load categories and host persons
          loadCategoriesForRegister();
          loadHostPersons();

          // Clear form
          document.getElementById("registerForm").reset();
          toggleFamilyMemberFields(false);
        }
      };

      window.closeRegisterModal = function () {
        const modal = document.getElementById("registerModal");
        if (modal) {
          modal.classList.add("hidden");
          modal.classList.remove("flex");
          document.body.style.overflow = "";

          // Clear form
          document.getElementById("registerForm").reset();
          toggleFamilyMemberFields(false);
        }
      };

      // Load categories for register modal
      async function loadCategoriesForRegister() {
        try {
          const response = await fetch("/api/categories");

          if (!response.ok) {
            console.error(
              "Categories API response not OK:",
              response.status,
              response.statusText
            );
            return;
          }

          const contentType = response.headers.get("content-type");
          if (!contentType || !contentType.includes("application/json")) {
            console.error("Categories API response is not JSON:", contentType);
            return;
          }

          const data = await response.json();

          if (data.success && data.categories) {
            const categorySelect = document.getElementById("registerCategory");
            if (categorySelect) {
              categorySelect.innerHTML =
                '<option value="">Select category</option>';
              data.categories.forEach((category) => {
                const option = document.createElement("option");
                option.value = category.id;
                option.textContent = category.name;
                categorySelect.appendChild(option);
              });
            }
          } else {
            console.error("Categories API returned error:", data.message);
          }
        } catch (error) {
          console.error("Failed to load categories:", error);
        }
      }

      // Load host persons for family members
      async function loadHostPersons() {
        try {
          const response = await fetch("/api/people");

          if (!response.ok) {
            console.error(
              "API response not OK:",
              response.status,
              response.statusText
            );
            return;
          }

          const contentType = response.headers.get("content-type");
          if (!contentType || !contentType.includes("application/json")) {
            console.error("API response is not JSON:", contentType);
            return;
          }

          const data = await response.json();

          if (data.success && data.people) {
            const hostSelect = document.getElementById("registerHostPerson");
            if (hostSelect) {
              hostSelect.innerHTML =
                '<option value="">Select host person</option>';
              data.people.forEach((person) => {
                const option = document.createElement("option");
                option.value = person.id;
                option.textContent = `${person.name} (${person.cnic})`;
                hostSelect.appendChild(option);
              });
            }
          } else {
            console.error("API returned error:", data.message);
          }
        } catch (error) {
          console.error("Failed to load host persons:", error);
        }
      }

      // Toggle family member fields
      function toggleFamilyMemberFields(show) {
        const familyFields = document.getElementById("familyMemberDetails");
        if (familyFields) {
          familyFields.style.display = show ? "block" : "none";
        }
      }

      // Register form submission
      async function handleRegisterSubmit(event) {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);
        const submitBtn = document.getElementById("submitRegisterBtn");

        // Validation
        if (!validateRegisterForm(formData)) {
          return;
        }

        // Show loading state
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.innerHTML =
          '<i class="fas fa-spinner fa-spin mr-2"></i>Registering...';
        submitBtn.disabled = true;

        try {
          const response = await fetch("/api/register-person", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(Object.fromEntries(formData)),
          });

          const data = await response.json();

          if (data.success) {
            Toast.success(
              `Person registered successfully! Card Number: ${data.card_number}`
            );
            closeRegisterModal();

            // Refresh the page or update UI as needed
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            Toast.error(data.message || "Registration failed");
          }
        } catch (error) {
          console.error("Registration error:", error);
          Toast.error("Failed to register person. Please try again.");
        } finally {
          // Reset button
          submitBtn.innerHTML = originalBtnText;
          submitBtn.disabled = false;
        }
      }

      // Validate register form
      function validateRegisterForm(formData) {
        const cnic = formData.get("cnic");
        const name = formData.get("name");
        const categoryId = formData.get("category_id");

        if (!cnic || cnic.length !== 13) {
          Toast.error("Please enter a valid 13-digit CNIC number");
          return false;
        }

        if (!name || name.trim().length < 2) {
          Toast.error("Please enter a valid name");
          return false;
        }

        if (!categoryId) {
          Toast.error("Please select a category");
          return false;
        }

        return true;
      }

      // Initialize register modal functionality
      document.addEventListener("DOMContentLoaded", function () {
        // Family member checkbox
        const familyCheckbox = document.getElementById(
          "registerIsFamilyMember"
        );
        if (familyCheckbox) {
          familyCheckbox.addEventListener("change", function () {
            toggleFamilyMemberFields(this.checked);
          });
        }

        // CNIC formatting for register form
        const registerCnic = document.getElementById("registerCnic");
        if (registerCnic) {
          registerCnic.addEventListener("input", function (e) {
            let value = e.target.value.replace(/\D/g, "");
            if (value.length > 13) {
              value = value.substring(0, 13);
            }
            e.target.value = value;
          });
        }

        // Form submission
        const registerForm = document.getElementById("registerForm");
        if (registerForm) {
          registerForm.addEventListener("submit", handleRegisterSubmit);
        }

        // Close modal when clicking outside
        const registerModal = document.getElementById("registerModal");
        if (registerModal) {
          registerModal.addEventListener("click", function (e) {
            if (e.target === this) {
              closeRegisterModal();
            }
          });
        }

        // ESC key to close modal
        document.addEventListener("keydown", function (e) {
          if (e.key === "Escape") {
            const modal = document.getElementById("registerModal");
            if (modal && !modal.classList.contains("hidden")) {
              closeRegisterModal();
            }
          }
        });
      });
    </script>

    <%- include('partials/toast') %> <%- include('partials/enhanced-modal') %>
  </body>
</html>
