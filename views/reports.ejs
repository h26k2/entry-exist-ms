<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reports - Entry Management System</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link rel="icon" type="image/svg+xml" href="/images/favicon.svg" />
    <link href="/css/global.css" rel="stylesheet" />
    <link href="/css/reports.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  </head>

  <body class="bg-gradient-to-br from-gray-50 to-blue-50 min-h-screen">
    <div class="flex h-screen">
      <%- include('partials/sidebar') %>

      <main class="flex-1 overflow-y-auto lg:ml-0">
        <%- include('partials/header', { title: 'User Reports' }) %>

        <!-- Main Content -->
        <div class="p-4 lg:p-6">
          <!-- Page Header -->
          <div class="mb-8">
            <div class="bg-white rounded-lg shadow-sm p-6">
              <div class="flex items-center justify-between">
                <div>
                  <h1 class="text-2xl font-bold text-gray-900">
                    User Reports
                  </h1>
                  <p class="text-gray-600 mt-1">
                    Comprehensive list of all registered users
                  </p>
                </div>
              </div>
            </div>
          </div>

          <!-- Search and Filter Section -->
          <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="grid grid-cols-1 lg:grid-cols-5 gap-4">
              <!-- Search -->
              <div class="lg:col-span-2">
                <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">
                  Search Users
                </label>
                <div class="relative">
                  <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                  <input
                    type="text"
                    id="searchInput"
                    placeholder="Search by name or CNIC..."
                    class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    oninput="performSearch()"
                  />
                </div>
              </div>

              <!-- Type Filter -->
              <div>
                <label for="typeFilter" class="block text-sm font-medium text-gray-700 mb-2">
                  User Type
                </label>
                <select
                  id="typeFilter"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  onchange="performSearch()"
                >
                  <option value="">All Types</option>
                  <option value="Civilian">Civilian</option>
                  <option value="Civil Govt. Officer">Civil Govt. Officer</option>
                  <option value="Retired Officer">Retired Officer</option>
                  <option value="Serving personnel">Serving personnel</option>
                  <option value="Family Member">Family Member</option>
                  <option value="Guest">Guest</option>
                </select>
              </div>

              <!-- Payment Status Filter -->
              <div>
                <label for="paymentFilter" class="block text-sm font-medium text-gray-700 mb-2">
                  Payment Status
                </label>
                <select
                  id="paymentFilter"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  onchange="performSearch()"
                >
                  <option value="">All Status</option>
                  <option value="paid">Paid</option>
                  <option value="unpaid">Unpaid</option>
                </select>
              </div>

              <!-- Facility Filter -->
              <div>
                <label for="facilityFilter" class="block text-sm font-medium text-gray-700 mb-2">
                  Facility
                </label>
                <select
                  id="facilityFilter"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  onchange="performSearch()"
                >
                  <option value="">All Facilities</option>
                  <!-- Facility options will be loaded dynamically -->
                </select>
              </div>
            </div>

            <div class="flex justify-between items-center mt-4">
              <div class="flex gap-3">
                <button
                  onclick="performSearch()"
                  class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors flex items-center gap-2"
                >
                  <i class="fas fa-search"></i>
                  Search
                </button>
                <button
                  onclick="clearSearch()"
                  class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors flex items-center gap-2"
                >
                  <i class="fas fa-times"></i>
                  Clear
                </button>
              </div>
              <button
                onclick="exportToExcel()"
                class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition-colors flex items-center gap-2"
              >
                <i class="fas fa-file-excel"></i>
                Export to Excel
              </button>
            </div>
          </div>

          <!-- Users Table -->
          <div class="bg-white rounded-lg shadow-sm overflow-hidden">
            <!-- Table Header -->
            <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-medium text-gray-900">Registered Users</h3>
                <div id="userCount" class="text-sm text-gray-500">
                  Loading...
                </div>
              </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      #
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Employee Code
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Name
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      CNIC Number
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Type
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Payment Status
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Last Payment
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Total Visits
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Facilities Availed
                    </th>
                  </tr>
                </thead>
                <tbody id="usersTableBody" class="bg-white divide-y divide-gray-200">
                  <tr>
                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                      <i class="fas fa-spinner fa-spin text-2xl mb-2"></i>
                      <div>Loading users...</div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>

            <!-- Pagination -->
            <div class="bg-gray-50 px-6 py-3 border-t border-gray-200">
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <p class="text-sm text-gray-700">
                    Showing <span id="startRecord">0</span> to <span id="endRecord">0</span> of <span id="totalRecords">0</span> results
                  </p>
                </div>
                <div class="flex items-center space-x-2">
                  <button id="prevPageBtn" onclick="changePage('prev')" class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    <i class="fas fa-chevron-left"></i>
                    Previous
                  </button>
                  <div id="pageNumbers" class="flex space-x-1">
                    <!-- Page numbers will be inserted here -->
                  </div>
                  <button id="nextPageBtn" onclick="changePage('next')" class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                    Next
                    <i class="fas fa-chevron-right"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>

    <script>
      // Global variables
      let currentPage = 1;
      let totalPages = 1;
      let currentSearchParams = {};
      const usersPerPage = 500; // Using same pagination as user management

      // Initialize the page
      document.addEventListener('DOMContentLoaded', function() {
        loadFacilities();
        loadUsers();
      });

      // Load facilities for filter dropdown
      async function loadFacilities() {
        try {
          const response = await fetch('/api/facilities');
          const data = await response.json();
          
          if (data.success) {
            const facilitySelect = document.getElementById('facilityFilter');
            // Clear existing options except "All Facilities"
            facilitySelect.innerHTML = '<option value="">All Facilities</option>';
            
            // Add facility options
            data.facilities.forEach(facility => {
              const option = document.createElement('option');
              option.value = facility.name;
              option.textContent = facility.name;
              facilitySelect.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error loading facilities:', error);
        }
      }

      // Load users function
      async function loadUsers(searchParams = {}) {
        currentSearchParams = searchParams;
        
        try {
          const params = new URLSearchParams({
            page: currentPage,
            limit: usersPerPage,
            ...searchParams
          });

          const response = await fetch(`/api/users?${params}`);
          const data = await response.json();

          if (data.success) {
            renderUsersTable(data.users);
            updatePagination(data.pagination);
            updateUserCount(data.pagination.totalRecords);
          } else {
            showError('Failed to load users');
          }
        } catch (error) {
          console.error('Error loading users:', error);
          showError('Error loading users');
        }
      }

      // Render users table
      function renderUsersTable(users) {
        const tbody = document.getElementById('usersTableBody');
        
        if (!users || users.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="9" class="px-6 py-8 text-center text-gray-500">
                <i class="fas fa-users text-3xl mb-2"></i>
                <p>No users found</p>
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = users.map((user, index) => {
          const displayIndex = (currentPage - 1) * usersPerPage + index + 1;
          
          // Format payment status
          const isGuest = user.registrationData?.type === 'Guest';
          const paymentStatus = isGuest ? 'N/A' : (user.registrationData?.is_paid ? 'paid' : 'unpaid');
          const statusClass = isGuest ? 'bg-gray-100 text-gray-800' : 
                              (paymentStatus === 'paid' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800');
          
          // Format last payment date
          const lastPayment = isGuest ? 'N/A' : 
                              (user.registrationData?.last_payment_date ? 
                                new Date(user.registrationData.last_payment_date).toLocaleDateString() : 'N/A');

          // Get family head name
          const familyHeadName = user.registrationData?.family_head_first_name && user.registrationData?.family_head_last_name
            ? `${user.registrationData.family_head_first_name} ${user.registrationData.family_head_last_name}`.trim()
            : null;

          return `
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${displayIndex}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${user.emp_code || 'N/A'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">${user.fullName || 'N/A'}</div>
                ${familyHeadName ? `<div class="text-xs text-gray-500">Family of: ${familyHeadName}</div>` : ''}
                ${user.registrationData?.issued_card_no ? `<div class="text-xs text-blue-500">Card: ${user.registrationData.issued_card_no}</div>` : ''}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${user.registrationData?.cnic_number || 'N/A'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getTypeColor(user.registrationData?.type)}">
                  ${user.registrationData?.type || 'Unregistered'}
                </span>
                ${user.registrationData?.relation_with_head ? `<div class="text-xs text-gray-500 mt-1">${user.registrationData.relation_with_head}</div>` : ''}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${statusClass}">
                  ${paymentStatus}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${lastPayment}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                <span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800">
                  <i class="fas fa-door-open mr-1"></i>
                  ${user.totalVisits || 0}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${user.facilities && user.facilities.length > 0 
                  ? user.facilities.map(facility => 
                      `<span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800 mr-1 mb-1">
                        <i class="fas fa-building mr-1"></i>
                        ${facility}
                      </span>`
                    ).join(' ')
                  : '<span class="text-gray-400 text-xs">No facilities</span>'
                }
              </td>
            </tr>
          `;
        }).join('');
      }

      // Get type color for badges
      function getTypeColor(type) {
        const colors = {
          'Civilian': 'bg-blue-100 text-blue-800',
          'Civil Govt. Officer': 'bg-purple-100 text-purple-800',
          'Retired Officer': 'bg-yellow-100 text-yellow-800',
          'Serving personnel': 'bg-green-100 text-green-800',
          'Family Member': 'bg-pink-100 text-pink-800',
          'Guest': 'bg-orange-100 text-orange-800'
        };
        return colors[type] || 'bg-gray-100 text-gray-800';
      }

      // Update pagination
      function updatePagination(pagination) {
        totalPages = pagination.totalPages;
        
        // Update record counts
        document.getElementById('startRecord').textContent = pagination.startRecord;
        document.getElementById('endRecord').textContent = pagination.endRecord;
        document.getElementById('totalRecords').textContent = pagination.totalRecords;

        // Update pagination buttons
        const prevBtn = document.getElementById('prevPageBtn');
        const nextBtn = document.getElementById('nextPageBtn');
        
        prevBtn.disabled = currentPage <= 1;
        nextBtn.disabled = currentPage >= totalPages;

        // Generate page numbers
        generatePageNumbers();
      }

      // Generate page numbers
      function generatePageNumbers() {
        const pageNumbers = document.getElementById('pageNumbers');
        let pages = [];

        // Always show first page
        if (totalPages > 0) pages.push(1);

        // Show pages around current page
        for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
          if (!pages.includes(i)) pages.push(i);
        }

        // Always show last page if there are multiple pages
        if (totalPages > 1 && !pages.includes(totalPages)) {
          pages.push(totalPages);
        }

        pageNumbers.innerHTML = pages.map(page => `
          <button 
            onclick="goToPage(${page})" 
            class="px-3 py-1 text-sm border rounded ${page === currentPage ? 'bg-blue-500 text-white border-blue-500' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'}"
          >
            ${page}
          </button>
        `).join('');
      }

      // Update user count
      function updateUserCount(total) {
        document.getElementById('userCount').textContent = `${total} users total`;
      }

      // Search functionality
      function performSearch() {
        const searchTerm = document.getElementById('searchInput').value;
        const typeFilter = document.getElementById('typeFilter').value;
        const paymentFilter = document.getElementById('paymentFilter').value;
        const facilityFilter = document.getElementById('facilityFilter').value;

        const searchParams = {};
        if (searchTerm) searchParams.search = searchTerm;
        if (typeFilter) searchParams.type = typeFilter;
        if (paymentFilter) searchParams.payment = paymentFilter; // API expects 'payment' not 'payment_status'
        if (facilityFilter) searchParams.facility = facilityFilter;

        currentPage = 1; // Reset to first page
        loadUsers(searchParams);
      }

      // Clear search
      function clearSearch() {
        document.getElementById('searchInput').value = '';
        document.getElementById('typeFilter').value = '';
        document.getElementById('paymentFilter').value = '';
        document.getElementById('facilityFilter').value = '';
        
        currentPage = 1;
        loadUsers();
      }

      // Pagination functions
      function changePage(direction) {
        if (direction === 'prev' && currentPage > 1) {
          currentPage--;
        } else if (direction === 'next' && currentPage < totalPages) {
          currentPage++;
        }
        loadUsers(currentSearchParams);
      }

      function goToPage(page) {
        currentPage = page;
        loadUsers(currentSearchParams);
      }

      // Export to Excel
      function exportToExcel() {
        // Collect all current table data
        const table = document.querySelector('table');
        const workbook = XLSX.utils.table_to_book(table);
        const filename = `user-reports-${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(workbook, filename);
      }

      // Error handling
      function showError(message) {
        const tbody = document.getElementById('usersTableBody');
        tbody.innerHTML = `
          <tr>
            <td colspan="9" class="px-6 py-8 text-center text-red-500">
              <i class="fas fa-exclamation-triangle text-3xl mb-2"></i>
              <p>${message}</p>
            </td>
          </tr>
        `;
      }
    </script>
  </body>
</html>
